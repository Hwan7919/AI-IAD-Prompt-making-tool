# -*- coding: utf-8 -*-
"""AI&IAD Final Project(Prompt Generator).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JWhpW6o21EAA2UNbuL_NyKhAhH68eYwk
"""

!pip install gradio

import os
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
import numpy as np
from PIL import Image
import gradio as gr

# 사전 학습된 모델 로드 (ResNet50)
model = ResNet50(weights='imagenet')

# 건축물 이미지에서 특징 추출
def extract_features(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    preds = model.predict(x)
    return decode_predictions(preds, top=10)[0]  # 상위 10개의 예측 결과 반환

# 특징을 기반으로 프롬프트 생성
def create_prompt(features):
    architectural_elements = {
        'castle': 'medieval, fortress, historic',
        'church': 'religious, sacred, gothic',
        'mosque': 'Islamic, dome, minaret',
        'palace': 'luxurious, grand, royal',
        'temple': 'spiritual, ancient, serene',
        'tower': 'tall, modern, landmark',
        'skyscraper': 'modern, tall, urban',
        'bridge': 'connecting, structural, engineered',
        'stadium': 'sport, large, open',
        'museum': 'art, cultural, modern',
        'theater': 'performance, cultural, artistic'
    }

    shape_elements = {
        'curve': 'curved, flowing, dynamic',
        'line': 'linear, straight, geometric',
        'organic': 'natural, flowing, biomorphic',
        'box': 'boxy, cubic, rectilinear'
    }

    style_elements = {
        'modern': 'sleek, clean, contemporary',
        'futuristic': 'advanced, cutting-edge, innovative',
        'classic': 'traditional, timeless, elegant',
        'rustic': 'natural, earthy, vintage'
    }

    material_elements = {
        'glass': 'glass, transparent, reflective',
        'metal': 'metallic, steel, industrial',
        'wood': 'wooden, natural, warm',
        'concrete': 'concrete, solid, brutalist'
    }

    atmosphere_elements = {
        'futuristic': 'futuristic, cutting-edge, sci-fi',
        'natural': 'natural, serene, eco-friendly',
        'urban': 'urban, cityscape, bustling',
        'rural': 'rural, countryside, tranquil'
    }

    function_elements = {
        'commercial': 'commercial, business, office',
        'residential': 'residential, home, housing',
        'public': 'public, government, community',
        'educational': 'educational, school, university'
    }

    prompts = []
    for feature in features:
        label = feature[1].replace('_', ' ')
        if label in architectural_elements:
            prompts.append(architectural_elements[label])
        elif label in shape_elements:
            prompts.append(shape_elements[label])
        elif label in style_elements:
            prompts.append(style_elements[label])
        elif label in material_elements:
            prompts.append(material_elements[label])
        elif label in atmosphere_elements:
            prompts.append(atmosphere_elements[label])
        elif label in function_elements:
            prompts.append(function_elements[label])
        else:
            prompts.append(label)
    return ', '.join(prompts)

# Positive Prompt 생성
def create_positive_prompt():
    return "Technical specifications: Detailed 3D render, suitable for use in virtual reality environments or architectural visualization. 8K, delicate, masterpiece, beautiful detailed, colorful, finely detailed, intricate details"

# Negative Prompt 생성
def create_negative_prompt():
    return "(worst quality, low quality:1.4), worse, text, error, cropped, worst quality, low quality, jpeg artifacts, ugly, duplicate, morbid, mutilated, out of frame, extra fingers, mutated hands, poorly drawn hands, poorly drawn face, mutation, deformed, blurry, dehydrated, bad anatomy, bad proportions, extra limbs, cloned face, disfigured, gross proportions, malformed limbs, missing arms, missing legs, extra arms, extra legs, fused fingers, too many fingers, long neck, username, watermark, signature"

# Gradio 인터페이스를 위한 함수
def generate_prompt_from_image(image):
    # 이미지를 임시 파일로 저장
    img_path = "temp_image.jpg"
    image.save(img_path)

    features = extract_features(img_path)
    prompt = create_prompt(features)
    positive_prompt = create_positive_prompt()
    negative_prompt = create_negative_prompt()

    # 각 건축물 유형과 유사도 계산
    similarity_scores = {feature[1]: feature[2] for feature in features}
    similarity_text = "\n".join([f"{label}: {score*100:.2f}%" for label, score in similarity_scores.items()])

    return prompt, similarity_text, positive_prompt, negative_prompt

# Gradio 인터페이스 설정
iface = gr.Interface(
    fn=generate_prompt_from_image,
    inputs=gr.Image(type='pil', label="Upload an image of architecture"),
    outputs=[
        gr.Textbox(label="Generated Prompt"),
        gr.Textbox(label="Similarity Scores"),
        gr.Textbox(label="Positive Prompt"),
        gr.Textbox(label="Negative Prompt")
    ],
    title="Architecture Image to Prompt Generator",
    description="Upload an image of an architecture to generate a descriptive prompt and see similarity scores for different types of architectures. Additionally, get suggestions for positive and negative prompts for image generation.",
)

# 인터페이스 실행
iface.launch()